// =================================================================================================
// eModbus: Copyright 2020 by Michael Harwerth, Bert Melis and the contributors to ModbusClient
//               MIT license - see license.md for details
// =================================================================================================

// Example code to show the usage of the eModbus library. 
// Please refer to root/Readme.md for a full description.

// Includes: <Arduino.h> for Serial etc.
#include <Arduino.h>

// Include the header for the ModbusClient RTU style
#include "ModbusClientRTU.h"

// Create a ModbusRTU client instance
// In my case the RS485 module had auto halfduplex, so no second parameter with the DE/RE pin is required!
ModbusClientRTU MB(Serial2);

// Define an onData handler function to receive the regular responses
// Arguments are Modbus server ID, the function code requested, the message data and length of it, 
// plus a user-supplied token to identify the causing request
void handleData(ModbusMessage response, uint32_t token) 
{
  Serial.printf("Response: serverID=%d, FC=%d, Token=%08X, length=%d:\n", response.getServerID(), response.getFunctionCode(), token, response.size());
  for (auto& byte : response) {
    Serial.printf("%02X ", byte);
  }
  Serial.println("");
}

// Define an onError handler function to receive error responses
// Arguments are the error code returned and a user-supplied token to identify the causing request
void handleError(Error error, uint32_t token) 
{
  // ModbusError wraps the error code and provides a readable error message for it
  ModbusError me(error);
  Serial.printf("Error response: %02X - %s\n", (int)me, (const char *)me);
}

// Setup() - initialization happens here
void setup() {
// Init Serial monitor
  Serial.begin(115200);
  while (!Serial) {}
  Serial.println("__ OK __");

// Set up Serial2 connected to Modbus RTU
// (Fill in your data here!)
  Serial2.begin(57600, SERIAL_8E1, GPIO_NUM_17, GPIO_NUM_16);

// Set up ModbusRTU client.
// - provide onData handler function
  MB.onDataHandler(&handleData);
// - provide onError handler function
  MB.onErrorHandler(&handleError);
// Set message timeout to 2000ms
  MB.setTimeout(2000);
// Start ModbusRTU background task
  MB.begin();

// We will first read the registers, then write to them and finally read them again to verify the change

// Create request for
// (Fill in your data here!)
// - server ID = 
// - function code =  
// - address to read = 
// - data words to read = 
// - token to match the response with the request.
//
// If something is missing or wrong with the call parameters, we will immediately get an error code 
// and the request will not be issued
  uint32_t Token = 1111;

  Error err = MB.addRequest(Token++, 1, READ_HOLD_REGISTER, 0x0067, 1);
  if (err!=SUCCESS) {
    ModbusError e(err);
    Serial.printf("Error creating request: %02X - %s\n", (int)e, (const char *)e);
  }

  err = MB.addRequest(Token++, 1, WRITE_HOLD_REGISTER, 0x0067, 0x0001);
  if (err!=SUCCESS) {
    ModbusError e(err);
    Serial.printf("Error creating request: %02X - %s\n", (int)e, (const char *)e);
  }

  err = MB.addRequest(Token++, 1, READ_HOLD_REGISTER, 0x0067, 1);
  if (err!=SUCCESS) {
    ModbusError e(err);
    Serial.printf("Error creating request: %02X - %s\n", (int)e, (const char *)e);
}


}

// loop() - nothing done here today!
void loop() {
}

/*
Mistery solved. The python script got their adresses from the included xml document which comes with the original JMC-Software. BUT those arent the register the JMC-Software uses. The JMC-Software uses registers with an offset of 0x8000. so instead of writing to 0x67 to change the rigidity settings i wrote to 0x8067 . And voila the settings stay in the EEPROM. Also the JMC-Software Constantly reads the Register at 0x07E4 and gets back 3. But nowhere its mentioned what this means. maybe a still alive thing but i thought that would be handled by the rs232. 

I checked this offset for a diffrent parametergroup aswell. P2-00 (the Position control gain) is also offset by 0x8000. So it seems to be constant and not changing between parametergroups. 

With this finding there seems to be nothing in the way for changing the parameters with the ossm Board. Besides testing it with the ossm-Board

With damus modbus library. The values are *10 so 150 is written 1500.
And the negativ one are FFFF 65635- the falue
The library converts to hex so when the value is right its easy

*/